// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message oneof groups
    pub kind: ::std::option::Option<Request_oneof_kind>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Request_oneof_kind {
    get(super::request::Get),
    set(super::request::Set),
    delete(super::request::Delete),
    scan(super::request::Scan),
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // .public.request.Get get = 1;

    pub fn clear_get(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: super::request::Get) {
        self.kind = ::std::option::Option::Some(Request_oneof_kind::get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut super::request::Get {
        if let ::std::option::Option::Some(Request_oneof_kind::get(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Request_oneof_kind::get(super::request::Get::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> super::request::Get {
        if self.has_get() {
            match self.kind.take() {
                ::std::option::Option::Some(Request_oneof_kind::get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::request::Get::new()
        }
    }

    pub fn get_get(&self) -> &super::request::Get {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::get(ref v)) => v,
            _ => super::request::Get::default_instance(),
        }
    }

    // .public.request.Set set = 2;

    pub fn clear_set(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_set(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: super::request::Set) {
        self.kind = ::std::option::Option::Some(Request_oneof_kind::set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut super::request::Set {
        if let ::std::option::Option::Some(Request_oneof_kind::set(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Request_oneof_kind::set(super::request::Set::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set(&mut self) -> super::request::Set {
        if self.has_set() {
            match self.kind.take() {
                ::std::option::Option::Some(Request_oneof_kind::set(v)) => v,
                _ => panic!(),
            }
        } else {
            super::request::Set::new()
        }
    }

    pub fn get_set(&self) -> &super::request::Set {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::set(ref v)) => v,
            _ => super::request::Set::default_instance(),
        }
    }

    // .public.request.Delete delete = 3;

    pub fn clear_delete(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: super::request::Delete) {
        self.kind = ::std::option::Option::Some(Request_oneof_kind::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut super::request::Delete {
        if let ::std::option::Option::Some(Request_oneof_kind::delete(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Request_oneof_kind::delete(super::request::Delete::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> super::request::Delete {
        if self.has_delete() {
            match self.kind.take() {
                ::std::option::Option::Some(Request_oneof_kind::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::request::Delete::new()
        }
    }

    pub fn get_delete(&self) -> &super::request::Delete {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::delete(ref v)) => v,
            _ => super::request::Delete::default_instance(),
        }
    }

    // .public.request.Scan scan = 4;

    pub fn clear_scan(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_scan(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan(&mut self, v: super::request::Scan) {
        self.kind = ::std::option::Option::Some(Request_oneof_kind::scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan(&mut self) -> &mut super::request::Scan {
        if let ::std::option::Option::Some(Request_oneof_kind::scan(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Request_oneof_kind::scan(super::request::Scan::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan(&mut self) -> super::request::Scan {
        if self.has_scan() {
            match self.kind.take() {
                ::std::option::Option::Some(Request_oneof_kind::scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::request::Scan::new()
        }
    }

    pub fn get_scan(&self) -> &super::request::Scan {
        match self.kind {
            ::std::option::Option::Some(Request_oneof_kind::scan(ref v)) => v,
            _ => super::request::Scan::default_instance(),
        }
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        if let Some(Request_oneof_kind::get(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_kind::set(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_kind::delete(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_kind::scan(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Request_oneof_kind::get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Request_oneof_kind::set(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Request_oneof_kind::delete(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Request_oneof_kind::scan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &Request_oneof_kind::get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_kind::set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_kind::delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_kind::scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &Request_oneof_kind::get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_kind::set(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_kind::delete(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_kind::scan(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::request::Get>(
                    "get",
                    Request::has_get,
                    Request::get_get,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::request::Set>(
                    "set",
                    Request::has_set,
                    Request::get_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::request::Delete>(
                    "delete",
                    Request::has_delete,
                    Request::get_delete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::request::Scan>(
                    "scan",
                    Request::has_scan,
                    Request::get_scan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.clear_get();
        self.clear_set();
        self.clear_delete();
        self.clear_scan();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message oneof groups
    pub kind: ::std::option::Option<Response_oneof_kind>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Response_oneof_kind {
    get(super::response::Get),
    set(super::response::Set),
    delete(super::response::Delete),
    scan(super::response::Scan),
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .public.response.Get get = 1;

    pub fn clear_get(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: super::response::Get) {
        self.kind = ::std::option::Option::Some(Response_oneof_kind::get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut super::response::Get {
        if let ::std::option::Option::Some(Response_oneof_kind::get(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Response_oneof_kind::get(super::response::Get::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> super::response::Get {
        if self.has_get() {
            match self.kind.take() {
                ::std::option::Option::Some(Response_oneof_kind::get(v)) => v,
                _ => panic!(),
            }
        } else {
            super::response::Get::new()
        }
    }

    pub fn get_get(&self) -> &super::response::Get {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::get(ref v)) => v,
            _ => super::response::Get::default_instance(),
        }
    }

    // .public.response.Set set = 2;

    pub fn clear_set(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_set(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set(&mut self, v: super::response::Set) {
        self.kind = ::std::option::Option::Some(Response_oneof_kind::set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set(&mut self) -> &mut super::response::Set {
        if let ::std::option::Option::Some(Response_oneof_kind::set(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Response_oneof_kind::set(super::response::Set::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set(&mut self) -> super::response::Set {
        if self.has_set() {
            match self.kind.take() {
                ::std::option::Option::Some(Response_oneof_kind::set(v)) => v,
                _ => panic!(),
            }
        } else {
            super::response::Set::new()
        }
    }

    pub fn get_set(&self) -> &super::response::Set {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::set(ref v)) => v,
            _ => super::response::Set::default_instance(),
        }
    }

    // .public.response.Delete delete = 3;

    pub fn clear_delete(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: super::response::Delete) {
        self.kind = ::std::option::Option::Some(Response_oneof_kind::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut super::response::Delete {
        if let ::std::option::Option::Some(Response_oneof_kind::delete(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Response_oneof_kind::delete(super::response::Delete::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> super::response::Delete {
        if self.has_delete() {
            match self.kind.take() {
                ::std::option::Option::Some(Response_oneof_kind::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            super::response::Delete::new()
        }
    }

    pub fn get_delete(&self) -> &super::response::Delete {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::delete(ref v)) => v,
            _ => super::response::Delete::default_instance(),
        }
    }

    // .public.response.Scan scan = 4;

    pub fn clear_scan(&mut self) {
        self.kind = ::std::option::Option::None;
    }

    pub fn has_scan(&self) -> bool {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::scan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scan(&mut self, v: super::response::Scan) {
        self.kind = ::std::option::Option::Some(Response_oneof_kind::scan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scan(&mut self) -> &mut super::response::Scan {
        if let ::std::option::Option::Some(Response_oneof_kind::scan(_)) = self.kind {
        } else {
            self.kind = ::std::option::Option::Some(Response_oneof_kind::scan(super::response::Scan::new()));
        }
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::scan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scan(&mut self) -> super::response::Scan {
        if self.has_scan() {
            match self.kind.take() {
                ::std::option::Option::Some(Response_oneof_kind::scan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::response::Scan::new()
        }
    }

    pub fn get_scan(&self) -> &super::response::Scan {
        match self.kind {
            ::std::option::Option::Some(Response_oneof_kind::scan(ref v)) => v,
            _ => super::response::Scan::default_instance(),
        }
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        if let Some(Response_oneof_kind::get(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Response_oneof_kind::set(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Response_oneof_kind::delete(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Response_oneof_kind::scan(ref v)) = self.kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Response_oneof_kind::get(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Response_oneof_kind::set(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Response_oneof_kind::delete(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.kind = ::std::option::Option::Some(Response_oneof_kind::scan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &Response_oneof_kind::get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Response_oneof_kind::set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Response_oneof_kind::delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Response_oneof_kind::scan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.kind {
            match v {
                &Response_oneof_kind::get(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Response_oneof_kind::set(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Response_oneof_kind::delete(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Response_oneof_kind::scan(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::response::Get>(
                    "get",
                    Response::has_get,
                    Response::get_get,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::response::Set>(
                    "set",
                    Response::has_set,
                    Response::get_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::response::Delete>(
                    "delete",
                    Response::has_delete,
                    Response::get_delete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::response::Scan>(
                    "scan",
                    Response::has_scan,
                    Response::get_scan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.clear_get();
        self.clear_set();
        self.clear_delete();
        self.clear_scan();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cpublic.proto\x12\x06public\x1a\rrequest.proto\x1a\x0eresponse.prot\
    o\"\xc1\x01\n\x07Request\x12'\n\x03get\x18\x01\x20\x01(\x0b2\x13.public.\
    request.GetH\0R\x03get\x12'\n\x03set\x18\x02\x20\x01(\x0b2\x13.public.re\
    quest.SetH\0R\x03set\x120\n\x06delete\x18\x03\x20\x01(\x0b2\x16.public.r\
    equest.DeleteH\0R\x06delete\x12*\n\x04scan\x18\x04\x20\x01(\x0b2\x14.pub\
    lic.request.ScanH\0R\x04scanB\x06\n\x04kind\"\xc6\x01\n\x08Response\x12(\
    \n\x03get\x18\x01\x20\x01(\x0b2\x14.public.response.GetH\0R\x03get\x12(\
    \n\x03set\x18\x02\x20\x01(\x0b2\x14.public.response.SetH\0R\x03set\x121\
    \n\x06delete\x18\x03\x20\x01(\x0b2\x17.public.response.DeleteH\0R\x06del\
    ete\x12+\n\x04scan\x18\x04\x20\x01(\x0b2\x15.public.response.ScanH\0R\
    \x04scanB\x06\n\x04kindb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
